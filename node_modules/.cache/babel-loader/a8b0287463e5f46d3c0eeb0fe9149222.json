{"ast":null,"code":"import React, { forwardRef } from 'react';\n\nvar isFunction = function (obj) {\n  return typeof obj === 'function';\n};\n\nvar MDXContext = React.createContext({});\n\nvar withMDXComponents = function (Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return React.createElement(Component, Object.assign({}, props, {\n      components: allComponents\n    }));\n  };\n};\n\nvar useMDXComponents = function (components) {\n  var contextComponents = React.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : Object.assign({}, contextComponents, components);\n  }\n\n  return allComponents;\n};\n\nvar MDXProvider = function (props) {\n  var allComponents = useMDXComponents(props.components);\n  return React.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nfunction objectWithoutProperties(obj, exclude) {\n  var target = {};\n\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];\n\n  return target;\n}\n\nvar TYPE_PROP_NAME = 'mdxType';\nvar DEFAULTS = {\n  inlineCode: 'code',\n  wrapper: function (ref) {\n    var children = ref.children;\n    return React.createElement(React.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = forwardRef(function (props, ref) {\n  var propComponents = props.components;\n  var mdxType = props.mdxType;\n  var originalType = props.originalType;\n  var parentName = props.parentName;\n  var rest = objectWithoutProperties(props, [\"components\", \"mdxType\", \"originalType\", \"parentName\"]);\n  var etc = rest;\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components[parentName + \".\" + type] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return React.createElement(Component, Object.assign({}, {\n      ref: ref\n    }, etc, {\n      components: propComponents\n    }));\n  }\n\n  return React.createElement(Component, Object.assign({}, {\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = 'MDXCreateElement';\n\nfunction createElement(type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === 'string' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === 'string' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return React.createElement.apply(null, createElementArgArray);\n  }\n\n  return React.createElement.apply(null, args);\n}\n\nexport { MDXContext, MDXProvider, useMDXComponents, withMDXComponents, createElement as mdx };","map":null,"metadata":{},"sourceType":"module"}